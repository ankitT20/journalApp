#spring.data.mongodb.uri=mongodb+srv://HIDDEN_PERMANENTLY
##spring.data.mongodb.host=localhost
##spring.data.mongodb.port=27017
#spring.data.mongodb.database=journaldb
#spring.data.mongodb.auto-index-creation=true
##spring.data.mongodb.username=myjournaluser
##spring.data.mongodb.password=mypassword
##spring.main.allow-circular-references=true
#server.port=8081
#server.servlet.context-path=/journal

# application.properties is given precedence over application.yml
# command line parameters >then> application.properties >then> application.yml
# terminal> java -jar .\journalApp-0.0.1-SNAPSHOT.jar --property=value
# Also, IntelliJ edit configurations > application > program arguments



#application.yml
#spring:
#  profiles:
#    active: dev

# In company
# there is NO application.yml, only application-dev.yml and application-prod.yml
# we have to specify spring.profiles.active=dev in Edit Configurations>Environment Variables of IntelliJ project
spring.profiles.active=dev
# and to build jar, test will fail (maven build, maven clean...) so use command line arguments
# .\mvnw clean package

# we give this CLA so it can run tests
# .\mvnw clean package -D spring.profiles.active=dev

# when running on production, we do not use -D
# we are running SpringBoot Application and passing arguments to the application, we are NOT setting any JVM property
# in maven we set JVM system properties, jo ki maven run krega, -D flag is standard way to set java system properties in command line
# cd .\target\
# java -jar .\journalApp-0.0.1-SNAPSHOT.jar  --spring.profiles.active=dev
# It is also possible that all this work is done by Jenkins (automate things)

#logging:
#  level:
#    root: OFF


#logging:
#  level:
#    net:
#      engineeringdigest:
#        journalApp:
#          service:
#            UserService: DEBUG

